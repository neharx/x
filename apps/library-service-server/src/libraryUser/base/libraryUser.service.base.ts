/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LibraryUser as PrismaLibraryUser } from "@prisma/client";

export class LibraryUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryUser.count(args);
  }

  async libraryUsers(
    args: Prisma.LibraryUserFindManyArgs
  ): Promise<PrismaLibraryUser[]> {
    return this.prisma.libraryUser.findMany(args);
  }
  async libraryUser(
    args: Prisma.LibraryUserFindUniqueArgs
  ): Promise<PrismaLibraryUser | null> {
    return this.prisma.libraryUser.findUnique(args);
  }
  async createLibraryUser(
    args: Prisma.LibraryUserCreateArgs
  ): Promise<PrismaLibraryUser> {
    return this.prisma.libraryUser.create(args);
  }
  async updateLibraryUser(
    args: Prisma.LibraryUserUpdateArgs
  ): Promise<PrismaLibraryUser> {
    return this.prisma.libraryUser.update(args);
  }
  async deleteLibraryUser(
    args: Prisma.LibraryUserDeleteArgs
  ): Promise<PrismaLibraryUser> {
    return this.prisma.libraryUser.delete(args);
  }
}
