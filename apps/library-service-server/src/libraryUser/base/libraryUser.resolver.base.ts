/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LibraryUser } from "./LibraryUser";
import { LibraryUserCountArgs } from "./LibraryUserCountArgs";
import { LibraryUserFindManyArgs } from "./LibraryUserFindManyArgs";
import { LibraryUserFindUniqueArgs } from "./LibraryUserFindUniqueArgs";
import { CreateLibraryUserArgs } from "./CreateLibraryUserArgs";
import { UpdateLibraryUserArgs } from "./UpdateLibraryUserArgs";
import { DeleteLibraryUserArgs } from "./DeleteLibraryUserArgs";
import { LibraryUserService } from "../libraryUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LibraryUser)
export class LibraryUserResolverBase {
  constructor(
    protected readonly service: LibraryUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LibraryUser",
    action: "read",
    possession: "any",
  })
  async _libraryUsersMeta(
    @graphql.Args() args: LibraryUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LibraryUser])
  @nestAccessControl.UseRoles({
    resource: "LibraryUser",
    action: "read",
    possession: "any",
  })
  async libraryUsers(
    @graphql.Args() args: LibraryUserFindManyArgs
  ): Promise<LibraryUser[]> {
    return this.service.libraryUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LibraryUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LibraryUser",
    action: "read",
    possession: "own",
  })
  async libraryUser(
    @graphql.Args() args: LibraryUserFindUniqueArgs
  ): Promise<LibraryUser | null> {
    const result = await this.service.libraryUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LibraryUser)
  @nestAccessControl.UseRoles({
    resource: "LibraryUser",
    action: "create",
    possession: "any",
  })
  async createLibraryUser(
    @graphql.Args() args: CreateLibraryUserArgs
  ): Promise<LibraryUser> {
    return await this.service.createLibraryUser({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LibraryUser)
  @nestAccessControl.UseRoles({
    resource: "LibraryUser",
    action: "update",
    possession: "any",
  })
  async updateLibraryUser(
    @graphql.Args() args: UpdateLibraryUserArgs
  ): Promise<LibraryUser | null> {
    try {
      return await this.service.updateLibraryUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryUser)
  @nestAccessControl.UseRoles({
    resource: "LibraryUser",
    action: "delete",
    possession: "any",
  })
  async deleteLibraryUser(
    @graphql.Args() args: DeleteLibraryUserArgs
  ): Promise<LibraryUser | null> {
    try {
      return await this.service.deleteLibraryUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
